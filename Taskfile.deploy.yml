version: "3"

# Taskfile for deployment operations

vars:
  # Contract to deploy (default to All)
  CONTRACT: '{{.CONTRACT | default "All"}}'

  # Deployment parameters
  GAS_LIMIT: '{{.GAS_LIMIT | default "8000000"}}'
  VERIFY: '{{.VERIFY | default "true"}}'
  LEGACY: '{{.LEGACY | default "--legacy"}}'

tasks:
  # Internal task for confirmation
  _confirm:
    internal: true
    silent: true
    cmds:
      - cmd: |
          if [ "{{.SKIP_CONFIRM}}" != "true" ]; then
            echo -e "\n‚ö†Ô∏è  WARNING: You are about to {{.ACTION}} on {{.NETWORK}} network"
            {{if .DETAILS}}echo -e "Details: {{.DETAILS}}"{{end}}
            echo -e "\nContinue? (y/N): "
            read -r response
            if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
              echo "Operation cancelled."
              exit 1
            fi
            echo "Proceeding with operation..."
          fi

  # Main deployment task
  deploy:
    desc: Deploy stablecoin contracts
    silent: true
    cmds:
      - task: _confirm
        vars:
          ACTION: "deploy {{.CONTRACT}} contract"
          DETAILS: "to {{.NETWORK}} network"
      - echo "üöÄ Deploying {{.CONTRACT}} to {{.NETWORK}}..."

      # Simple auto-select for special networks
      - cmd: |
          # For certain networks, use special controllers if we're deploying "All"
          if [ "{{.CONTRACT}}" = "All" ]; then
            if [ "{{.NETWORK}}" = "gnosis" ] || [ "{{.NETWORK}}" = "gnosis-chiado" ]; then
              export CONTRACT="AllControllerGnosis"
              echo "Using Gnosis controller for this network"
            elif [ "{{.NETWORK}}" = "polygon" ] || [ "{{.NETWORK}}" = "polygon-amoy" ]; then
              export CONTRACT="AllControllerPolygon"
              echo "Using Polygon controller for this network"
            fi
          fi

          # Get RPC URL from environment
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          # Execute the deployment
          forge script script/deploy.s.sol:{{.CONTRACT}} \
            --rpc-url ${!RPC_VAR} \
            --broadcast \
            {{if eq .VERIFY "true"}}--verify{{end}} \
            --gas-limit {{.GAS_LIMIT}} \
            -{{.VERBOSITY}} \
            {{.LEGACY}}
      - echo "‚úÖ Deployment complete!"

  # Convenience commands
  local:
    desc: Deploy to local development environment
    silent: true
    cmds:
      - task: deploy
        vars:
          NETWORK: "localhost"
          CONTRACT: '{{.CONTRACT | default "Dev"}}'
          VERIFY: "false"

  testnet:
    desc: Deploy to a testnet with safety checks
    silent: true
    cmds:
      - cmd: |
          if [ -z "{{.NETWORK}}" ]; then
            echo "‚ùå Missing required NETWORK parameter"
            echo ""
            echo "Usage:"
            echo "  task deploy:testnet NETWORK=sepolia [CONTRACT=All]"
            exit 1
          fi

          # Validate that this is actually a testnet
          if [[ "{{.NETWORK}}" != *"sepolia"* && "{{.NETWORK}}" != *"fuji"* && "{{.NETWORK}}" != *"chiado"* && "{{.NETWORK}}" != *"amoy"* && "{{.NETWORK}}" != "localhost" ]]; then
            echo "‚ö†Ô∏è Warning: {{.NETWORK}} doesn't appear to be a testnet. Continue anyway? (y/N): "
            read -r response
            if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
              echo "Operation cancelled."
              exit 1
            fi
          fi
      - task: deploy
        vars:
          NETWORK: "{{.NETWORK}}"
          CONTRACT: '{{.CONTRACT | default "All"}}'

  mainnet:
    desc: Deploy to a mainnet with additional safety checks
    silent: true
    cmds:
      - cmd: |
          if [ -z "{{.NETWORK}}" ]; then
            echo "‚ùå Missing required NETWORK parameter"
            echo ""
            echo "Usage:"
            echo "  task deploy:mainnet NETWORK=mainnet [CONTRACT=All]"
            exit 1
          fi

          echo "üî¥ MAINNET DEPLOYMENT ALERT üî¥"
          echo ""
          echo "You are about to deploy to {{.NETWORK}} MAINNET!"
          echo "This is a production environment where mistakes can be costly."
          echo ""
          echo "Please verify the following information:"
          echo "- Network: {{.NETWORK}}"
          echo "- Contract: {{.CONTRACT | default \"All\"}}"
          echo ""
          echo "To proceed, type 'CONFIRM MAINNET DEPLOY' (all caps): "
          read -r confirmation

          if [ "$confirmation" != "CONFIRM MAINNET DEPLOY" ]; then
            echo "Deployment cancelled."
            exit 1
          fi

          echo "‚úì Confirmation received. Proceeding with deployment..."
      - task: deploy
        vars:
          NETWORK: "{{.NETWORK}}"
          CONTRACT: '{{.CONTRACT | default "All"}}'

  # Helper tasks for deployment
  estimate-gas:
    desc: Estimate gas for deployment
    silent: true
    cmds:
      - cmd: |
          if [ -z "{{.NETWORK}}" ]; then
            echo "‚ùå Missing required NETWORK parameter"
            echo ""
            echo "Usage:"
            echo "  task deploy:estimate-gas NETWORK=sepolia [CONTRACT=All]"
            exit 1
          fi

          RPC_VAR="{{.NETWORK | upper}}_RPC"
          echo "‚õΩ Estimating gas for deploying {{.CONTRACT}} to {{.NETWORK}}..."
          forge script script/deploy.s.sol:{{.CONTRACT}} \
            --rpc-url ${!RPC_VAR} \
            -{{.VERBOSITY}} \
            --gas-report

  # Specialized deployments
  validator:
    desc: Deploy only the BlacklistValidator
    silent: true
    cmds:
      - task: deploy
        vars:
          CONTRACT: "BlacklistValidator"
