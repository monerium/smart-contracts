version: "3"

# Taskfile for token operations

tasks:
  # Help command
  help:
    desc: Show token command usage
    cmds:
      - cmd: |
          echo "üî∂ Token Operations"
          echo ""
          echo "Usage:"
          echo "  task token <command> [parameters]"
          echo ""
          echo "OWNERSHIP COMMANDS:"
          echo "  owner               - Get current owner"
          echo "  pending-owner       - Get pending owner"
          echo "  transfer-ownership  - Transfer ownership to new address"
          echo "  accept-ownership    - Accept pending ownership"
          echo ""
          echo "MONEY COMMANDS:"
          echo "  balance             - Check token balance"
          echo "  supply              - Check total supply"
          echo "  mint                - Mint tokens to address"
          echo "  burn                - Burn tokens (requires signature)"
          echo "  get-allowance       - Get mint allowance"
          echo "  set-allowance       - Set mint allowance for account"
          echo "  set-max-allowance   - Set maximum mint allowance"
          echo ""
          echo "ROLE MANAGEMENT:"
          echo "  check-admin         - Check if account has admin role"
          echo "  check-system        - Check if account has system role"
          echo "  add-admin           - Add account to admin role"
          echo "  remove-admin        - Remove account from admin role"
          echo "  add-system          - Add account to system role"
          echo "  remove-system       - Remove account from system role"
          echo "  get-validator       - Get current validator address"
          echo "  set-validator       - Set validator address"
          echo ""
          echo "Examples:"
          echo "  task token owner ADDRESS=0x123... NETWORK=mainnet"
          echo "  task token balance ADDRESS=0x123... ACCOUNT=0x456... NETWORK=sepolia"
          echo "  task token mint ADDRESS=0x123... TO=0x456... AMOUNT=1000000000000000000 NETWORK=sepolia"

  # OWNERSHIP COMMANDS
  owner:
    desc: Get current owner of a contract
    cmds:
      - cmd: |
          if [ -z "{{.ADDRESS}}" ]; then
            echo "‚ùå Missing required ADDRESS parameter"
            echo "Usage: task token owner ADDRESS=0xContractAddress [NETWORK=sepolia]"
            exit 1
          fi

          # Get network-specific RPC URL
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          forge script script/token/Owner.s.sol:Owner \
            --sig "run(address)" {{.ADDRESS}} \
            --rpc-url ${!RPC_VAR} \
            -{{.VERBOSITY}}

  pending-owner:
    desc: Get pending owner of a contract
    cmds:
      - cmd: |
          if [ -z "{{.ADDRESS}}" ]; then
            echo "‚ùå Missing required ADDRESS parameter"
            echo "Usage: task token pending-owner ADDRESS=0xContractAddress [NETWORK=sepolia]"
            exit 1
          fi

          # Get network-specific RPC URL
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          forge script script/token/Owner.s.sol:PendingOwner \
            --sig "run(address)" {{.ADDRESS}} \
            --rpc-url ${!RPC_VAR} \
            -{{.VERBOSITY}}

  transfer-ownership:
    desc: Transfer ownership of a contract
    cmds:
      - cmd: |
          if [ -z "{{.ADDRESS}}" ] || [ -z "{{.NEW_OWNER}}" ]; then
            echo "‚ùå Missing required parameters"
            echo "Usage: task token transfer-ownership ADDRESS=0xContractAddress NEW_OWNER=0xNewOwnerAddress [NETWORK=sepolia]"
            exit 1
          fi

          # Get network-specific RPC URL
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          # Confirmation for write operation
          if [ "{{.SKIP_CONFIRM}}" != "true" ]; then
            echo -e "\n‚ö†Ô∏è  WARNING: You are about to transfer ownership of {{.ADDRESS}} to {{.NEW_OWNER}} on {{.NETWORK}} network"
            echo -e "\nContinue? (y/N): "
            read -r response
            if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
              echo "Operation cancelled."
              exit 1
            fi
            echo "Proceeding with ownership transfer..."
          fi

          forge script script/token/Owner.s.sol:TransferOwnership \
            --sig "run(address,address)" {{.ADDRESS}} {{.NEW_OWNER}} \
            --rpc-url ${!RPC_VAR} \
            --private-key $PRIVATE_KEY \
            --broadcast \
            -{{.VERBOSITY}}

  accept-ownership:
    desc: Accept ownership of a contract
    cmds:
      - cmd: |
          if [ -z "{{.ADDRESS}}" ]; then
            echo "‚ùå Missing required ADDRESS parameter"
            echo "Usage: task token accept-ownership ADDRESS=0xContractAddress [NETWORK=sepolia]"
            exit 1
          fi

          # Get network-specific RPC URL
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          # Confirmation for write operation
          if [ "{{.SKIP_CONFIRM}}" != "true" ]; then
            echo -e "\n‚ö†Ô∏è  WARNING: You are about to accept ownership of {{.ADDRESS}} on {{.NETWORK}} network"
            echo -e "\nContinue? (y/N): "
            read -r response
            if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
              echo "Operation cancelled."
              exit 1
            fi
            echo "Proceeding with accepting ownership..."
          fi

          forge script script/token/Owner.s.sol:AcceptOwnership \
            --sig "run(address)" {{.ADDRESS}} \
            --rpc-url ${!RPC_VAR} \
            --private-key $PRIVATE_KEY \
            --broadcast \
            -{{.VERBOSITY}}

  # MONEY OPERATIONS
  balance:
    desc: Check token balance for an address
    cmds:
      - cmd: |
          if [ -z "{{.ADDRESS}}" ] || [ -z "{{.ACCOUNT}}" ]; then
            echo "‚ùå Missing required parameters"
            echo "Usage: task token balance ADDRESS=0xTokenAddress ACCOUNT=0xAccountAddress [NETWORK=sepolia]"
            exit 1
          fi

          # Get network-specific RPC URL
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          forge script script/token/Money.s.sol:Balance \
            --sig "run(address,address)" {{.ADDRESS}} {{.ACCOUNT}} \
            --rpc-url ${!RPC_VAR} \
            -{{.VERBOSITY}}

  supply:
    desc: Check total supply of a token
    cmds:
      - cmd: |
          if [ -z "{{.ADDRESS}}" ]; then
            echo "‚ùå Missing required ADDRESS parameter"
            echo "Usage: task token supply ADDRESS=0xTokenAddress [NETWORK=sepolia]"
            exit 1
          fi

          # Get network-specific RPC URL
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          forge script script/token/Money.s.sol:Supply \
            --sig "run(address)" {{.ADDRESS}} \
            --rpc-url ${!RPC_VAR} \
            -{{.VERBOSITY}}

  mint:
    desc: Mint tokens to an address
    cmds:
      - cmd: |
          if [ -z "{{.ADDRESS}}" ] || [ -z "{{.TO}}" ] || [ -z "{{.AMOUNT}}" ]; then
            echo "‚ùå Missing required parameters"
            echo "Usage: task token mint ADDRESS=0xTokenAddress TO=0xRecipientAddress AMOUNT=<amount> [NETWORK=sepolia]"
            exit 1
          fi

          # Get network-specific RPC URL
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          # Confirmation for write operation
          if [ "{{.SKIP_CONFIRM}}" != "true" ]; then
            echo -e "\n‚ö†Ô∏è  WARNING: You are about to mint {{.AMOUNT}} tokens to {{.TO}} from contract {{.ADDRESS}} on {{.NETWORK}} network"
            echo -e "\nContinue? (y/N): "
            read -r response
            if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
              echo "Operation cancelled."
              exit 1
            fi
            echo "Proceeding with minting..."
          fi

          forge script script/token/Money.s.sol:Mint \
            --sig "run(address,address,uint256)" {{.ADDRESS}} {{.TO}} {{.AMOUNT}} \
            --rpc-url ${!RPC_VAR} \
            --private-key $PRIVATE_KEY \
            --broadcast \
            -{{.VERBOSITY}}

  burn:
    desc: Burn tokens (requires signature)
    cmds:
      - cmd: |
          if [ -z "{{.ADDRESS}}" ] || [ -z "{{.FROM}}" ] || [ -z "{{.AMOUNT}}" ] || [ -z "{{.SIG}}" ]; then
            echo "‚ùå Missing required parameters"
            echo "Usage: task token burn ADDRESS=0xTokenAddress FROM=0xFromAddress AMOUNT=<amount> SIG=<signature> [NETWORK=sepolia]"
            exit 1
          fi

          # Get network-specific RPC URL
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          # Confirmation for write operation
          if [ "{{.SKIP_CONFIRM}}" != "true" ]; then
            echo -e "\n‚ö†Ô∏è  WARNING: You are about to burn {{.AMOUNT}} tokens from {{.FROM}} on contract {{.ADDRESS}} on {{.NETWORK}} network"
            echo -e "\nContinue? (y/N): "
            read -r response
            if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
              echo "Operation cancelled."
              exit 1
            fi
            echo "Proceeding with burning..."
          fi

          forge script script/token/Money.s.sol:Burn \
            --sig "run(address,address,uint256,bytes)" {{.ADDRESS}} {{.FROM}} {{.AMOUNT}} {{.SIG}} \
            --rpc-url ${!RPC_VAR} \
            --private-key $PRIVATE_KEY \
            --broadcast \
            -{{.VERBOSITY}}

  get-allowance:
    desc: Get mint allowance for an account
    cmds:
      - cmd: |
          if [ -z "{{.ADDRESS}}" ] || [ -z "{{.ACCOUNT}}" ]; then
            echo "‚ùå Missing required parameters"
            echo "Usage: task token get-allowance ADDRESS=0xTokenAddress ACCOUNT=0xAccountAddress [NETWORK=sepolia]"
            exit 1
          fi

          # Get network-specific RPC URL
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          forge script script/token/Money.s.sol:GetMintAllowance \
            --sig "run(address,address)" {{.ADDRESS}} {{.ACCOUNT}} \
            --rpc-url ${!RPC_VAR} \
            -{{.VERBOSITY}}

  set-allowance:
    desc: Set mint allowance for an account
    cmds:
      - cmd: |
          if [ -z "{{.ADDRESS}}" ] || [ -z "{{.ACCOUNT}}" ] || [ -z "{{.AMOUNT}}" ]; then
            echo "‚ùå Missing required parameters"
            echo "Usage: task token set-allowance ADDRESS=0xTokenAddress ACCOUNT=0xAccountAddress AMOUNT=<amount> [NETWORK=sepolia]"
            exit 1
          fi

          # Get network-specific RPC URL
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          # Confirmation for write operation
          if [ "{{.SKIP_CONFIRM}}" != "true" ]; then
            echo -e "\n‚ö†Ô∏è  WARNING: You are about to set mint allowance for {{.ACCOUNT}} to {{.AMOUNT}} on contract {{.ADDRESS}} on {{.NETWORK}} network"
            echo -e "\nContinue? (y/N): "
            read -r response
            if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
              echo "Operation cancelled."
              exit 1
            fi
            echo "Proceeding with setting allowance..."
          fi

          forge script script/token/Money.s.sol:SetMintAllowance \
            --sig "run(address,address,uint256)" {{.ADDRESS}} {{.ACCOUNT}} {{.AMOUNT}} \
            --rpc-url ${!RPC_VAR} \
            --private-key $PRIVATE_KEY \
            --broadcast \
            -{{.VERBOSITY}}

  set-max-allowance:
    desc: Set maximum mint allowance
    cmds:
      - cmd: |
          if [ -z "{{.ADDRESS}}" ] || [ -z "{{.AMOUNT}}" ]; then
            echo "‚ùå Missing required parameters"
            echo "Usage: task token set-max-allowance ADDRESS=0xTokenAddress AMOUNT=<amount> [NETWORK=sepolia]"
            exit 1
          fi

          # Get network-specific RPC URL
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          # Confirmation for write operation
          if [ "{{.SKIP_CONFIRM}}" != "true" ]; then
            echo -e "\n‚ö†Ô∏è  WARNING: You are about to set maximum mint allowance to {{.AMOUNT}} on contract {{.ADDRESS}} on {{.NETWORK}} network"
            echo -e "\nContinue? (y/N): "
            read -r response
            if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
              echo "Operation cancelled."
              exit 1
            fi
            echo "Proceeding with setting max allowance..."
          fi

          forge script script/token/Money.s.sol:SetMaxMintAllowance \
            --sig "run(address,uint256)" {{.ADDRESS}} {{.AMOUNT}} \
            --rpc-url ${!RPC_VAR} \
            --private-key $PRIVATE_KEY \
            --broadcast \
            -{{.VERBOSITY}}

  # ROLE MANAGEMENT
  check-admin:
    desc: Check if account has admin role
    cmds:
      - cmd: |
          if [ -z "{{.ADDRESS}}" ] || [ -z "{{.ACCOUNT}}" ]; then
            echo "‚ùå Missing required parameters"
            echo "Usage: task token check-admin ADDRESS=0xTokenAddress ACCOUNT=0xAccountAddress [NETWORK=sepolia]"
            exit 1
          fi

          # Get network-specific RPC URL
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          forge script script/token/Role.s.sol:CheckAdmin \
            --sig "run(address,address)" {{.ADDRESS}} {{.ACCOUNT}} \
            --rpc-url ${!RPC_VAR} \
            -{{.VERBOSITY}}

  check-system:
    desc: Check if account has system role
    cmds:
      - cmd: |
          if [ -z "{{.ADDRESS}}" ] || [ -z "{{.ACCOUNT}}" ]; then
            echo "‚ùå Missing required parameters"
            echo "Usage: task token check-system ADDRESS=0xTokenAddress ACCOUNT=0xAccountAddress [NETWORK=sepolia]"
            exit 1
          fi

          # Get network-specific RPC URL
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          forge script script/token/Role.s.sol:CheckSystem \
            --sig "run(address,address)" {{.ADDRESS}} {{.ACCOUNT}} \
            --rpc-url ${!RPC_VAR} \
            -{{.VERBOSITY}}

  add-admin:
    desc: Add account to admin role
    cmds:
      - cmd: |
          if [ -z "{{.ADDRESS}}" ] || [ -z "{{.ACCOUNT}}" ]; then
            echo "‚ùå Missing required parameters"
            echo "Usage: task token add-admin ADDRESS=0xTokenAddress ACCOUNT=0xAccountAddress [NETWORK=sepolia]"
            exit 1
          fi

          # Get network-specific RPC URL
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          # Confirmation for write operation
          if [ "{{.SKIP_CONFIRM}}" != "true" ]; then
            echo -e "\n‚ö†Ô∏è  WARNING: You are about to add {{.ACCOUNT}} as admin to contract {{.ADDRESS}} on {{.NETWORK}} network"
            echo -e "\nContinue? (y/N): "
            read -r response
            if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
              echo "Operation cancelled."
              exit 1
            fi
            echo "Proceeding with adding admin..."
          fi

          forge script script/token/Role.s.sol:AddAdmin \
            --sig "run(address,address)" {{.ADDRESS}} {{.ACCOUNT}} \
            --rpc-url ${!RPC_VAR} \
            --private-key $PRIVATE_KEY \
            --broadcast \
            -{{.VERBOSITY}}

  remove-admin:
    desc: Remove account from admin role
    cmds:
      - cmd: |
          if [ -z "{{.ADDRESS}}" ] || [ -z "{{.ACCOUNT}}" ]; then
            echo "‚ùå Missing required parameters"
            echo "Usage: task token remove-admin ADDRESS=0xTokenAddress ACCOUNT=0xAccountAddress [NETWORK=sepolia]"
            exit 1
          fi

          # Get network-specific RPC URL
          RPC_VAR="{{.NETWORK | upper}}_RPC"

          # Confirmation for write operation
          if [ "{{.SKIP_CONFIRM}}" != "true" ]; then
            echo -e "\n‚ö†Ô∏è  WARNING: You are about to remove {{.ACCOUNT}} from admin role on contract {{.
